I used dynamic structures in multiple ways inside my program.An example is the highScore list. I'm using an arrayList to store the scores. The advantage of using ArrayLists is that I don't need to know what the size of the high score is, since there may be unpredictable number of games played. In this case the finite data structures would not be good for the job because, they have a set size, and every time the program goes over the set size a new array would have to be created. With dynamic data structure you don't have to worry about that at all.

The dynamic data types that we learned in class were stacks, queues ,binary trees and Linked lists. Stacks work on the basis of first in last out, basically like a stack of pancakes where you can remove the top one. Queues on the other hand work on the basis of first in first out so objects are added at one end and removed at the other end. Binary trees are a type of data structure that orders its data for fast searching by having 2 paths from each node. For the purpose of my program I used Linked lists to represent the long cat. The binary tree obviously can't be used in this situation, and stack only works with Objects on top so it couldn't represent the snake in my game.However I sort of used parts of queue and Linked lists together making a combination of both. Whenever my snake moves I add a new Node at the front and remove a node at the back, which would correspond to the functions of a queue. But when I need to find a specific Node to check for collision, I'm using concepts of Linked Lists to traverse from Node to Node. So overall I'm using a fusion of queues and linked list to make my program function.